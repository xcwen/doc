
# -*- org -*-
# +TITLE: online  代码 最新实践 
* 概要
online 程序 使用单进程epoll异步回调驱动程序运行,  以求达成高并发目标。

代码写法的演化也经历了很多年. 这里一个目前实践中新型 online 代码架构

它的特点如下:

*.用户数据尽可能保存在online上: 以避免每次从db中读取,使得协议代码因回调搞得凌乱不堪

*.用户请求序列化: 可以一个一个处理请求，防止不同请求同时处理时意想不到的事情发生

*.使用 协议平台 编辑协议的相关内容

*.重载SO ,数据SO中支持虚函数对象

*.使用 std::map 创建的 定时器 : 高效，易懂. 支持重载SO

*.使用 Cmessage 序列化 协议报文 :  少写代码 ,不易出错，代码可读性强.

*.使用 Cmessage 做 用户 session 的 数据保存. 

*.使用 Cmessage 读取 xml 配置 文件. 

*.模拟客户端

* 用户数据保存在online 上  

在登录online ,将用户的相关数据 从dbser 中 都读取到online 上.

在online直接处理逻辑，然后将修改同步到 dbser ,  

如果 dbser 返回出错， 就说明online 处理有问题. 直接将用户下线.


* 用户请求序列化 
用户自身保存一个请求包缓存列表.

请求包进来时，如果一个包在处理中，则将自己加入到缓存列表，否则直接处理，并设置 当前有包在处理

当一包完成时，设置当前状态为 没有包在处理。 如果缓存中有未处理的请求包，则加入定时器，让定时器触发处理包功能


* 使用 协议平台 

使用协议平台编辑所有的协议

使用它将使得整个程序的代码的手工编写量减少30%以上

* 定时器 

使用 std::map 替换原来 嵌入式链表 实现。   

使用函数指针 回调相关函数 

使用 Cmessage 做函数参数

这两个结构都会在重载SO后失效,  需要重置

* Cmessage 的应用 
** 用于协议中的私有包的序列化& 反序列化
** xml文件读取
** 保存协议过程中的临时变量.  session
